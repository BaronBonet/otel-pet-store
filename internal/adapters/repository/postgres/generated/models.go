// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package generated

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type PetStatus string

const (
	PetStatusAVAILABLE PetStatus = "AVAILABLE"
	PetStatusPENDING   PetStatus = "PENDING"
	PetStatusSOLD      PetStatus = "SOLD"
)

func (e *PetStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PetStatus(s)
	case string:
		*e = PetStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for PetStatus: %T", src)
	}
	return nil
}

type NullPetStatus struct {
	PetStatus PetStatus
	Valid     bool // Valid is true if PetStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPetStatus) Scan(value interface{}) error {
	if value == nil {
		ns.PetStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PetStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPetStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PetStatus), nil
}

type Pet struct {
	ID        pgtype.UUID
	Name      string
	Type      string
	Status    PetStatus
	CreatedAt pgtype.Timestamptz
	UpdatedAt pgtype.Timestamptz
}
