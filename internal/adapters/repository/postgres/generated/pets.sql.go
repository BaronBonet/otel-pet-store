// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: pets.sql

package generated

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPet = `-- name: CreatePet :exec
INSERT INTO pets (
    id, name, type, status, created_at, updated_at
) VALUES (
    $1, $2, $3, $4, $5, $6
)
`

type CreatePetParams struct {
	ID        pgtype.UUID
	Name      string
	Type      string
	Status    PetStatus
	CreatedAt pgtype.Timestamptz
	UpdatedAt pgtype.Timestamptz
}

func (q *Queries) CreatePet(ctx context.Context, arg CreatePetParams) error {
	_, err := q.db.Exec(ctx, createPet,
		arg.ID,
		arg.Name,
		arg.Type,
		arg.Status,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const getPet = `-- name: GetPet :one
SELECT id, name, type, status, created_at, updated_at FROM pets WHERE id = $1
`

func (q *Queries) GetPet(ctx context.Context, id pgtype.UUID) (Pet, error) {
	row := q.db.QueryRow(ctx, getPet, id)
	var i Pet
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Type,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listPets = `-- name: ListPets :many
SELECT id, name, type, status, created_at, updated_at FROM pets
`

func (q *Queries) ListPets(ctx context.Context) ([]Pet, error) {
	rows, err := q.db.Query(ctx, listPets)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Pet
	for rows.Next() {
		var i Pet
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Type,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePetStatus = `-- name: UpdatePetStatus :exec
UPDATE pets 
SET status = $2, updated_at = $3
WHERE id = $1
`

type UpdatePetStatusParams struct {
	ID        pgtype.UUID
	Status    PetStatus
	UpdatedAt pgtype.Timestamptz
}

func (q *Queries) UpdatePetStatus(ctx context.Context, arg UpdatePetStatusParams) error {
	_, err := q.db.Exec(ctx, updatePetStatus, arg.ID, arg.Status, arg.UpdatedAt)
	return err
}
